{"version":3,"sources":["../../src/controllers/service.controller.js"],"names":["validateBody","isUpdate","exists","withMessage","createService","req","res","next","validationErrors","array","length","create","body","newDoc","status","json","allServices","find","allDocs"],"mappings":";;;;;;AAAA;;;;AACA;;;;AACA;;AACA;;;;;;;;kBAIe;;AAEX;AACAA,gBAHW,0BAGoB;AAAA,YAAlBC,QAAkB,uEAAP,KAAO;;AAC3B,eAAO,CACH,iBAAK,MAAL,EAAaC,MAAb,GAAsBC,WAAtB,CAAkC,kBAAlC,CADG,EAEH,iBAAK,OAAL,EAAcD,MAAd,GAAuBC,WAAvB,CAAmC,sBAAnC,CAFG,CAAP;AAIH,KARU;;AASX;AACMC,iBAVK,yBAUSC,GAVT,EAUcC,GAVd,EAUmBC,IAVnB,EAUyB;AAAA;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAEtBC,4CAFsB,GAEH,6BAAiBH,GAAjB,EAAsBI,KAAtB,EAFG;;AAAA,kCAGxBD,iBAAiBE,MAAjB,GAA0B,CAHF;AAAA;AAAA;AAAA;;AAAA,6DAIjBH,KAAK,uBAAa,GAAb,EAAkBC,gBAAlB,CAAL,CAJiB;;AAAA;AAAA;AAAA,mCAKT,mBAAQG,MAAR,CAAeN,IAAIO,IAAnB,CALS;;AAAA;AAKxBC,kCALwB;AAAA,6DAMrBP,IAAIQ,MAAJ,CAAW,GAAX,EAAgBC,IAAhB,CAAqBF,MAArB,CANqB;;AAAA;AAAA;AAAA;;AAQ5BN;;AAR4B;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAUnC,KApBU;;AAqBX;AACMS,eAtBK,uBAsBOX,GAtBP,EAsBYC,GAtBZ,EAsBiBC,IAtBjB,EAsBuB;AAAA;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,mCAEN,mBAAQU,IAAR,EAFM;;AAAA;AAEtBC,mCAFsB;AAAA,8DAGnBZ,IAAIQ,MAAJ,CAAW,GAAX,EAAgBC,IAAhB,CAAqBG,OAArB,CAHmB;;AAAA;AAAA;AAAA;;AAK1BX;;AAL0B;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAOjC;AA7BU,C","file":"service.controller.js","sourcesContent":["import Service from \"../models/services.model\";\r\nimport ApiError from \"../helpers/ApiError\";\r\nimport { body, validationResult } from 'express-validator/check';\r\nimport mongoose, { Schema } from \"mongoose\";\r\n\r\n\r\n\r\nexport default {\r\n\r\n    //validation on request parameter during sinup route\r\n    validateBody(isUpdate = false) {\r\n        return [\r\n            body(\"name\").exists().withMessage(\"name is required\"),\r\n            body(\"price\").exists().withMessage(\"password is required\"),\r\n        ];\r\n    },\r\n    //create new service\r\n    async createService(req, res, next) {\r\n        try {\r\n            const validationErrors = validationResult(req).array();\r\n            if (validationErrors.length > 0)\r\n                return next(new ApiError(422, validationErrors));\r\n            let newDoc = await Service.create(req.body);\r\n            return res.status(201).json(newDoc)\r\n        } catch (err) {\r\n            next(err)\r\n        }\r\n    },\r\n    //retrive all services \r\n    async allServices(req, res, next) {\r\n        try {\r\n            let allDocs = await Service.find();\r\n            return res.status(200).json(allDocs)\r\n        } catch (err) {\r\n            next(err)\r\n        }\r\n    }\r\n}\r\n"]}