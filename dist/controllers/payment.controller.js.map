{"version":3,"sources":["../../src/controllers/payment.controller.js"],"names":["validateBody","isUpdate","exists","withMessage","createPayment","req","res","next","validationErrors","array","length","servicesIds","body","services","prices","x","findById","service","push","price","console","log","summution","accumulator","currentValue","total","reduce","actualTotalPrice","create","newPayment","client","counterOfService","save","id","populate","responceObject","status","json","allPayment","find","allDocs"],"mappings":"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","file":"payment.controller.js","sourcesContent":["import Client from '../models/client.model'\r\nimport ApiError from \"../helpers/ApiError\";\r\nimport { body, validationResult } from 'express-validator/check';\r\nimport mongoose, { Schema } from \"mongoose\";\r\nimport Payment from '../models/payment.model';\r\nimport Service from '../models/services.model'\r\n\r\nexport default {\r\n    //validation on request parameter during sinup route\r\n    validateBody(isUpdate = false) {\r\n        return [\r\n            body(\"appointment\").exists().withMessage(\"appointment is required\"),\r\n            body(\"client\").exists().withMessage(\"client is required\"),\r\n            body(\"employee\").exists().withMessage(\"employee is required\"),\r\n            body(\"services\").exists().withMessage(\"services is required\"),\r\n            body(\"finalTotalPrice\").exists().withMessage(\"finalTotalPrice is required\"),\r\n        ];\r\n    },\r\n    //create new payment\r\n    async createPayment(req, res, next) {\r\n        const validationErrors = validationResult(req).array();\r\n        if (validationErrors.length > 0)\r\n            return next(new ApiError(422, validationErrors));\r\n        let servicesIds = req.body.services;\r\n        let prices = []\r\n        for (let x = 0; x < servicesIds.length; x++) {\r\n            let service = await Service.findById(servicesIds[x]);\r\n            prices.push(service.price);\r\n        }\r\n        console.log(prices);\r\n        const summution = (accumulator, currentValue) => accumulator + currentValue;\r\n        let total = prices.reduce(summution);\r\n        if (req.body.actualTotalPrice != total)\r\n            return next(new ApiError(422, \"incorrect total price\"));\r\n        let newPayment = await Payment.create(req.body);\r\n        //increament count of client \r\n        let client = await Client.findById(req.body.client);\r\n        client.counterOfService++;\r\n        await client.save();\r\n        let responceObject = await Payment.findById(newPayment.id)\r\n            .populate('appointment')\r\n            .populate('client')\r\n            .populate('employee')\r\n            .populate('services')\r\n        return res.status(200).json(responceObject);\r\n    },\r\n    //retrive all services \r\n    async allPayment(req, res, next) {\r\n        try {\r\n            let allDocs = await Payment.find()\r\n                .populate('appointment')\r\n                .populate('client')\r\n                .populate('employee')\r\n                .populate('services')\r\n            return res.status(200).json(allDocs)\r\n        } catch (err) {\r\n            next(err)\r\n        }\r\n    }\r\n}\r\n"]}