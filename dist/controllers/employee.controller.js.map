{"version":3,"sources":["../../src/controllers/employee.controller.js"],"names":["validateBody","isUpdate","exists","withMessage","createEmp","req","res","next","file","body","img","create","newDoc","status","json","allEmployees","find","allDocs","employeeDetails","empId","params","findById","docDetails","allPaymentUnderOneEmplyee","query","employee","startDate","endDate","parseInt","creationDate","$gte","$lte","payments","sum","reduce","all","item","index","finalTotalPrice","console","log"],"mappings":"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","file":"employee.controller.js","sourcesContent":["import Client from \"../models/client.model\";\r\nimport Employee from '../models/employee.model'\r\nimport ApiError from \"../helpers/ApiError\";\r\nimport { body, validationResult } from 'express-validator/check';\r\nimport mongoose, { Schema } from \"mongoose\";\r\nimport { toImgUrl } from '../utils/index'\r\nimport Payment from '../models/payment.model'\r\n\r\nexport default {\r\n    validateBody(isUpdate = false) {\r\n        return [\r\n            body(\"clint\").exists().withMessage(\"name is required\"),\r\n            body(\"phone\").exists().withMessage(\"phone is required\"),\r\n            body(\"nationaId\").exists().withMessage(\"nationaId is required\")\r\n        ];\r\n    },\r\n    //create new client then new appointment\r\n    async createEmp(req, res, next) {\r\n        try {\r\n            if (req.file)\r\n                req.body.img = await toImgUrl(req.file)\r\n            let newDoc = await Employee.create(req.body);\r\n            return res.status(201).json(newDoc);\r\n        } catch (err) {\r\n            next(err)\r\n        }\r\n    },\r\n    //retrive all employees \r\n    async allEmployees(req, res, next) {\r\n        try {\r\n            let allDocs = await Employee.find();\r\n            return res.status(200).json(allDocs)\r\n        } catch (err) {\r\n            next(err)\r\n        }\r\n    },\r\n    async employeeDetails(req, res, next) {\r\n        try {\r\n            const empId = req.params.empId;\r\n            let docDetails = await Employee.findById(empId);\r\n            return res.status(200).json(docDetails);\r\n        } catch (err) {\r\n            next(err)\r\n        }\r\n    },\r\n\r\n    async allPaymentUnderOneEmplyee(req, res, next) {\r\n        try {\r\n            let empId = req.params.empId;\r\n            let query = {}\r\n            query.employee = empId;\r\n            let { startDate, endDate } = req.query;\r\n            if (startDate) {\r\n                startDate = parseInt(startDate)\r\n                query.creationDate = { $gte: +startDate }\r\n            }\r\n            if (endDate) {\r\n                endDate = parseInt(endDate)\r\n                query.creationDate = { ...query.creationDate, $lte: +endDate }\r\n            }\r\n            let payments = await Payment.find(query);\r\n            //calculate summution of porfit for this emp\r\n            var sum = payments.reduce(function (all, item, index) {\r\n                return all += item.finalTotalPrice;\r\n                console.log(all + \"in\" + item)\r\n            }, 0);\r\n            //responce \r\n            return res.status(200).json({\r\n                \"payments\": payments,\r\n                \"sumOfMony\": sum\r\n            })\r\n\r\n        } catch (err) {\r\n            next(err)\r\n        }\r\n    },\r\n\r\n}\r\n"]}