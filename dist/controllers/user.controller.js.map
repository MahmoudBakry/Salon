{"version":3,"sources":["../../src/controllers/user.controller.js"],"names":["jwtSecret","generateToken","sign","sub","id","iss","iat","Date","getTime","expiresIn","validateBody","isUpdate","exists","withMessage","signup","req","res","next","validationErrors","array","length","file","body","img","create","createdUser","status","send","user","token","signin"],"mappings":";;;;;;AAAA;;;;AACA;;;;AACA;;;;AACA;;;;AACA;;AACA;;AACA;;;;;;;;IAKQA,S,oBAAAA,S;;AACR,IAAMC,gBAAgB,SAAhBA,aAAgB,KAAM;;AAExB,WAAO,uBAAIC,IAAJ,CAAS;AACZC,aAAKC,EADO;AAEZC,aAAK,KAFO;AAGZC,aAAK,IAAIC,IAAJ,GAAWC,OAAX;AAHO,KAAT,EAIJR,SAJI,EAIO,EAAES,WAAW,QAAb,EAJP,CAAP;AAKH,CAPD;;kBAUe;AACX;AACAC,gBAFW,0BAEoB;AAAA,YAAlBC,QAAkB,uEAAP,KAAO;;AAC3B,eAAO,CACH,iBAAK,MAAL,EAAaC,MAAb,GAAsBC,WAAtB,CAAkC,kBAAlC,CADG,EAEH,iBAAK,UAAL,EAAiBD,MAAjB,GAA0BC,WAA1B,CAAsC,sBAAtC,CAFG,EAGH,iBAAK,OAAL,EAAcD,MAAd,GAAuBC,WAAvB,CAAmC,mBAAnC,CAHG,CAAP;AAKH,KARU;;AASX;AACMC,UAVK,kBAUEC,GAVF,EAUOC,GAVP,EAUYC,IAVZ,EAUkB;AAAA;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACnBC,4CADmB,GACA,6BAAiBH,GAAjB,EAAsBI,KAAtB,EADA;;AAAA,kCAErBD,iBAAiBE,MAAjB,GAA0B,CAFL;AAAA;AAAA;AAAA;;AAAA,6DAGdH,KAAK,uBAAa,GAAb,EAAkBC,gBAAlB,CAAL,CAHc;;AAAA;AAAA;;AAAA,iCAKjBH,IAAIM,IALa;AAAA;AAAA;AAAA;;AAAA;AAAA,mCAMI,qBAASN,IAAIM,IAAb,CANJ;;AAAA;AAMjBN,gCAAIO,IAAJ,CAASC,GANQ;;AAAA;AAAA;AAAA,mCAQG,eAAKC,MAAL,CAAYT,IAAIO,IAAhB,CARH;;AAAA;AAQjBG,uCARiB;;AASrBT,gCAAIU,MAAJ,CAAW,GAAX,EAAgBC,IAAhB,CAAqB,EAAEC,MAAMH,WAAR,EAAqBI,OAAO5B,cAAcwB,YAAYrB,EAA1B,CAA5B,EAArB;AATqB;AAAA;;AAAA;AAAA;AAAA;;AAWrBa;;AAXqB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAa5B,KAvBU;;;AAyBX;AACMa,UA1BK,kBA0BEf,GA1BF,EA0BOC,GA1BP,EA0BYC,IA1BZ,EA0BkB;AAAA;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACrBW,gCADqB,GACdb,IAAIa,IADU,EACJ;;AACrBZ,gCAAIW,IAAJ,CAAS,EAAEC,UAAF,EAAQC,OAAO5B,cAAc2B,KAAKxB,EAAnB,CAAf,EAAT;;AAFyB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAG5B;AA7BU,C","file":"user.controller.js","sourcesContent":["import User from \"../models/user.model\";\r\nimport ApiError from \"../helpers/ApiError\";\r\nimport jwt from \"jsonwebtoken\";\r\nimport config from \"../config\";\r\nimport { toImgUrl } from '../utils';\r\nimport { body, validationResult } from 'express-validator/check';\r\nimport mongoose, { Schema } from \"mongoose\";\r\n\r\n\r\n\r\n\r\nconst { jwtSecret } = config;\r\nconst generateToken = id => {\r\n\r\n    return jwt.sign({\r\n        sub: id,\r\n        iss: 'App',\r\n        iat: new Date().getTime(),\r\n    }, jwtSecret, { expiresIn: '10000s' })\r\n}\r\n\r\n\r\nexport default {\r\n    //validation on request parameter during sinup route\r\n    validateBody(isUpdate = false) {\r\n        return [\r\n            body(\"name\").exists().withMessage(\"name is required\"),\r\n            body(\"password\").exists().withMessage(\"password is required\"),\r\n            body(\"phone\").exists().withMessage(\"phone is requires\")\r\n        ];\r\n    },\r\n    //signup \r\n    async signup(req, res, next) {\r\n        const validationErrors = validationResult(req).array();\r\n        if (validationErrors.length > 0)\r\n            return next(new ApiError(422, validationErrors));\r\n        try {\r\n            if (req.file)\r\n                req.body.img = await toImgUrl(req.file);\r\n\r\n            let createdUser = await User.create(req.body);\r\n            res.status(201).send({ user: createdUser, token: generateToken(createdUser.id) });\r\n        } catch (err) {\r\n            next(err);\r\n        }\r\n    },\r\n\r\n    //signin\r\n    async signin(req, res, next) {\r\n        let user = req.user; // Passport\r\n        res.send({ user, token: generateToken(user.id) });\r\n    },\r\n\r\n}"]}