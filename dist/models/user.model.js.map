{"version":3,"sources":["../../src/models/user.model.js"],"names":["UserSchema","_id","type","Number","required","name","String","trim","password","phone","img","pushTokens","pre","next","account","isModified","salt","genSaltSync","hash","then","catch","console","log","err","methods","isValidPassword","newPassword","callback","user","compare","isMatch","set","transform","doc","ret","options","id","__v","initialize","connection","plugin","model","startAt"],"mappings":";;;;;;AAAA;;;;AACA;;;;AACA;;;;;;AAEA,IAAMA,aAAa,qBAAW;AAC1BC,SAAK;AACDC,cAAMC,MADL;AAEDC,kBAAU;AAFT,KADqB;AAK1BC,UAAM;AACFH,cAAMI,MADJ;AAEFC,cAAM,IAFJ;AAGFH,kBAAU;AAHR,KALoB;AAU1BI,cAAU;AACNN,cAAMI,MADA;AAENF,kBAAU;AAFJ,KAVgB;AAc1BK,WAAO;AACHP,cAAMI,MADH;AAEHF,kBAAU;AAFP,KAdmB;AAkB1BM,SAAK,EAAE;AACHR,cAAMI;AADL,KAlBqB;AAqB1BK,gBAAY,CAAC;AACTT,cAAMI;AADG,KAAD;;AArBc,CAAX,CAAnB;;AA8BAN,WAAWY,GAAX,CAAe,MAAf,EAAuB,UAAUC,IAAV,EAAgB;AACnC,QAAMC,UAAU,IAAhB;AACA,QAAI,CAACA,QAAQC,UAAR,CAAmB,UAAnB,CAAL,EAAqC,OAAOF,MAAP;;AAErC,QAAMG,OAAO,mBAAOC,WAAP,EAAb;AACA,uBAAOC,IAAP,CAAYJ,QAAQN,QAApB,EAA8BQ,IAA9B,EAAoCG,IAApC,CAAyC,gBAAQ;AAC7CL,gBAAQN,QAAR,GAAmBU,IAAnB;AACAL;AACH,KAHD,EAGGO,KAHH,CAGS;AAAA,eAAOC,QAAQC,GAAR,CAAYC,GAAZ,CAAP;AAAA,KAHT;AAIH,CATD;;AAcAvB,WAAWwB,OAAX,CAAmBC,eAAnB,GAAqC,UAAUC,WAAV,EAAuBC,QAAvB,EAAiC;AAClE,QAAIC,OAAO,IAAX;AACA,uBAAOC,OAAP,CAAeH,WAAf,EAA4BE,KAAKpB,QAAjC,EAA2C,UAAUe,GAAV,EAAeO,OAAf,EAAwB;AAC/D,YAAIP,GAAJ,EACI,OAAOI,SAASJ,GAAT,CAAP;AACJI,iBAAS,IAAT,EAAeG,OAAf;AACH,KAJD;AAKH,CAPD;;AAUA9B,WAAW+B,GAAX,CAAe,QAAf,EAAyB;AACrBC,eAAW,mBAAUC,GAAV,EAAeC,GAAf,EAAoBC,OAApB,EAA6B;AACpCD,YAAIE,EAAJ,GAASF,IAAIjC,GAAb;;AAEA,eAAOiC,IAAI1B,QAAX;AACA,eAAO0B,IAAIvB,UAAX;AACA,eAAOuB,IAAIhC,IAAX;AACA,eAAOgC,IAAIjC,GAAX;AACA,eAAOiC,IAAIG,GAAX;AACH;AAToB,CAAzB;;AAYA,gCAAcC,UAAd,CAAyB,mBAASC,UAAlC;AACAvC,WAAWwC,MAAX,CAAkB,gCAAcA,MAAhC,EAAwC;AACpCC,WAAO,MAD6B;AAEpCC,aAAS;AAF2B,CAAxC;;kBAKe,mBAASD,KAAT,CAAe,MAAf,EAAuBzC,UAAvB,C","file":"user.model.js","sourcesContent":["import mongoose, { Schema } from \"mongoose\";\r\nimport bcrypt from \"bcryptjs\";\r\nimport autoIncrement from 'mongoose-auto-increment';\r\n\r\nconst UserSchema = new Schema({\r\n    _id: {\r\n        type: Number,\r\n        required: true\r\n    },\r\n    name: {\r\n        type: String,\r\n        trim: true,\r\n        required: true\r\n    }, \r\n    password: {\r\n        type: String,\r\n        required: true\r\n    },\r\n    phone: {\r\n        type: String,\r\n        required: true,\r\n    },\r\n    img: { // url \r\n        type: String\r\n    },\r\n    pushTokens: [{\r\n        type: String\r\n    }]\r\n\r\n\r\n});\r\n\r\n\r\n\r\nUserSchema.pre(\"save\", function (next) {\r\n    const account = this;\r\n    if (!account.isModified('password')) return next();\r\n\r\n    const salt = bcrypt.genSaltSync();\r\n    bcrypt.hash(account.password, salt).then(hash => {\r\n        account.password = hash;\r\n        next();\r\n    }).catch(err => console.log(err));\r\n});\r\n\r\n\r\n\r\n\r\nUserSchema.methods.isValidPassword = function (newPassword, callback) {\r\n    let user = this;\r\n    bcrypt.compare(newPassword, user.password, function (err, isMatch) {\r\n        if (err)\r\n            return callback(err);\r\n        callback(null, isMatch);\r\n    })\r\n};\r\n\r\n\r\nUserSchema.set('toJSON', {\r\n    transform: function (doc, ret, options) {\r\n        ret.id = ret._id;\r\n\r\n        delete ret.password;\r\n        delete ret.pushTokens;\r\n        delete ret.type;\r\n        delete ret._id;\r\n        delete ret.__v;\r\n    }\r\n});\r\n\r\nautoIncrement.initialize(mongoose.connection);\r\nUserSchema.plugin(autoIncrement.plugin, {\r\n    model: 'user',\r\n    startAt: 1,\r\n});\r\n\r\nexport default mongoose.model(\"user\", UserSchema);"]}